import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Switch } from '@/components/ui/switch';
import { 
  Plus, 
  Edit, 
  Trash2, 
  Upload, 
  BarChart3, 
  Users, 
  ShoppingCart, 
  DollarSign,
  ArrowLeft,
  Eye,
  MessageSquare
} from 'lucide-react';
import { Product, Purchase, User, FeedPost } from '@/lib/types';
import { useNavigate } from 'react-router-dom';
import FloatingNotifications from '@/components/FloatingNotifications';
import { toast } from 'sonner';

export default function AdminDashboard() {
  const [products, setProducts] = useState<Product[]>([]);
  const [purchases, setPurchases] = useState<Purchase[]>([]);
  const [users, setUsers] = useState<User[]>([]);
  const [feedPosts, setFeedPosts] = useState<FeedPost[]>([]);
  const [showProductDialog, setShowProductDialog] = useState(false);
  const [showPostDialog, setShowPostDialog] = useState(false);
  const [editingProduct, setEditingProduct] = useState<Product | null>(null);
  const [newProduct, setNewProduct] = useState<Partial<Product>>({
    title: '',
    description: '',
    price: 0,
    originalPrice: 0,
    category: '',
    stock: 1,
    isFlashSale: false,
    images: []
  });
  const [newPost, setNewPost] = useState({
    content: '',
    type: 'post' as 'post' | 'announcement'
  });

  const navigate = useNavigate();

  useEffect(() => {
    loadDashboardData();
  }, []);

  const loadDashboardData = async () => {
    // Mock data loading
    const mockProducts: Product[] = [
      {
        id: '1',
        title: 'Mobile Legends Epic Account',
        description: 'Epic rank account with 50+ heroes and rare skins',
        price: 150000,
        originalPrice: 200000,
        images: ['/api/placeholder/300/200'],
        category: 'Mobile Legends',
        isFlashSale: true,
        flashSaleEndTime: new Date(Date.now() + 2 * 60 * 60 * 1000),
        stock: 3,
        seller: 'JB Alwikobra',
        createdAt: new Date()
      }
    ];

    const mockPurchases: Purchase[] = [
      {
        id: '1',
        userId: 'user1',
        productId: '1',
        amount: 150000,
        status: 'paid',
        paymentMethod: 'xendit',
        createdAt: new Date()
      }
    ];

    const mockUsers: User[] = [
      {
        id: 'user1',
        name: 'John Doe',
        email: 'john@example.com',
        whatsapp: '08123456789',
        isVerified: true,
        role: 'user',
        createdAt: new Date(),
        purchaseHistory: []
      }
    ];

    setProducts(mockProducts);
    setPurchases(mockPurchases);
    setUsers(mockUsers);
  };

  const handleSaveProduct = () => {
    if (!newProduct.title || !newProduct.description || !newProduct.price) {
      toast.error('Mohon lengkapi semua field yang wajib diisi');
      return;
    }

    const productData: Product = {
      id: editingProduct?.id || `product_${Date.now()}`,
      title: newProduct.title!,
      description: newProduct.description!,
      price: newProduct.price!,
      originalPrice: newProduct.originalPrice,
      images: newProduct.images || ['/api/placeholder/300/200'],
      category: newProduct.category!,
      isFlashSale: newProduct.isFlashSale || false,
      flashSaleEndTime: newProduct.isFlashSale ? new Date(Date.now() + 24 * 60 * 60 * 1000) : undefined,
      stock: newProduct.stock || 1,
      seller: 'JB Alwikobra',
      createdAt: editingProduct?.createdAt || new Date()
    };

    if (editingProduct) {
      setProducts(prev => prev.map(p => p.id === editingProduct.id ? productData : p));
      toast.success('Produk berhasil diupdate');
    } else {
      setProducts(prev => [...prev, productData]);
      toast.success('Produk berhasil ditambahkan');
    }

    resetProductForm();
  };

  const handleDeleteProduct = (productId: string) => {
    setProducts(prev => prev.filter(p => p.id !== productId));
    toast.success('Produk berhasil dihapus');
  };

  const handleEditProduct = (product: Product) => {
    setEditingProduct(product);
    setNewProduct(product);
    setShowProductDialog(true);
  };

  const resetProductForm = () => {
    setNewProduct({
      title: '',
      description: '',
      price: 0,
      originalPrice: 0,
      category: '',
      stock: 1,
      isFlashSale: false,
      images: []
    });
    setEditingProduct(null);
    setShowProductDialog(false);
  };

  const handleCreatePost = () => {
    if (!newPost.content.trim()) {
      toast.error('Konten post tidak boleh kosong');
      return;
    }

    const post: FeedPost = {
      id: `post_${Date.now()}`,
      authorId: 'admin',
      authorName: 'JB Alwikobra Official',
      content: newPost.content,
      type: newPost.type,
      likes: [],
      comments: [],
      createdAt: new Date()
    };

    setFeedPosts(prev => [post, ...prev]);
    setNewPost({ content: '', type: 'post' });
    setShowPostDialog(false);
    toast.success('Post berhasil dibuat');
  };

  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files;
    if (files && files.length > 0) {
      // In a real app, upload to cloud storage and get URLs
      const imageUrls = Array.from(files).map(() => '/api/placeholder/300/200');
      setNewProduct(prev => ({
        ...prev,
        images: [...(prev.images || []), ...imageUrls]
      }));
      toast.success(`${files.length} gambar berhasil diupload`);
    }
  };

  const formatPrice = (price: number) => {
    return new Intl.NumberFormat('id-ID', {
      style: 'currency',
      currency: 'IDR',
      minimumFractionDigits: 0
    }).format(price);
  };

  const getStatusBadge = (status: Purchase['status']) => {
    const variants = {
      pending: 'secondary',
      paid: 'default',
      cancelled: 'destructive',
      completed: 'default'
    } as const;

    const labels = {
      pending: 'Menunggu',
      paid: 'Dibayar',
      cancelled: 'Dibatalkan',
      completed: 'Selesai'
    };

    return (
      <Badge variant={variants[status]}>
        {labels[status]}
      </Badge>
    );
  };

  // Dashboard stats
  const totalRevenue = purchases.filter(p => p.status === 'paid').reduce((sum, p) => sum + p.amount, 0);
  const totalProducts = products.length;
  const totalUsers = users.length;
  const totalOrders = purchases.length;

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Floating Notifications */}
      <FloatingNotifications />

      {/* Header */}
      <header className="bg-white shadow-sm border-b">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <Button variant="ghost" size="icon" onClick={() => navigate('/')}>
                <ArrowLeft className="h-4 w-4" />
              </Button>
              <div>
                <h1 className="text-2xl font-bold">Admin Dashboard</h1>
                <p className="text-sm text-muted-foreground">JB Alwikobra Management Panel</p>
              </div>
            </div>
          </div>
        </div>
      </header>

      <div className="container mx-auto px-4 py-6">
        {/* Stats Cards */}
        <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-muted-foreground">Total Revenue</p>
                  <p className="text-2xl font-bold">{formatPrice(totalRevenue)}</p>
                </div>
                <DollarSign className="h-8 w-8 text-green-600" />
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-muted-foreground">Total Produk</p>
                  <p className="text-2xl font-bold">{totalProducts}</p>
                </div>
                <ShoppingCart className="h-8 w-8 text-blue-600" />
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-muted-foreground">Total Users</p>
                  <p className="text-2xl font-bold">{totalUsers}</p>
                </div>
                <Users className="h-8 w-8 text-purple-600" />
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-muted-foreground">Total Orders</p>
                  <p className="text-2xl font-bold">{totalOrders}</p>
                </div>
                <BarChart3 className="h-8 w-8 text-orange-600" />
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Main Content */}
        <Tabs defaultValue="products" className="space-y-6">
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="products">Produk</TabsTrigger>
            <TabsTrigger value="orders">Pesanan</TabsTrigger>
            <TabsTrigger value="users">Users</TabsTrigger>
            <TabsTrigger value="feed">Feed</TabsTrigger>
          </TabsList>

          {/* Products Tab */}
          <TabsContent value="products" className="space-y-6">
            <div className="flex justify-between items-center">
              <h2 className="text-xl font-semibold">Manajemen Produk</h2>
              <Dialog open={showProductDialog} onOpenChange={setShowProductDialog}>
                <DialogTrigger asChild>
                  <Button className="gap-2">
                    <Plus className="h-4 w-4" />
                    Tambah Produk
                  </Button>
                </DialogTrigger>
                <DialogContent className="max-w-2xl max-h-[80vh] overflow-y-auto">
                  <DialogHeader>
                    <DialogTitle>
                      {editingProduct ? 'Edit Produk' : 'Tambah Produk Baru'}
                    </DialogTitle>
                  </DialogHeader>
                  <div className="space-y-4">
                    <div>
                      <Label htmlFor="title">Judul Produk *</Label>
                      <Input
                        id="title"
                        value={newProduct.title}
                        onChange={(e) => setNewProduct(prev => ({ ...prev, title: e.target.value }))}
                        placeholder="Contoh: Mobile Legends Epic Account"
                      />
                    </div>

                    <div>
                      <Label htmlFor="description">Deskripsi *</Label>
                      <Textarea
                        id="description"
                        value={newProduct.description}
                        onChange={(e) => setNewProduct(prev => ({ ...prev, description: e.target.value }))}
                        placeholder="Deskripsi detail produk..."
                        rows={3}
                      />
                    </div>

                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <Label htmlFor="price">Harga *</Label>
                        <Input
                          id="price"
                          type="number"
                          value={newProduct.price}
                          onChange={(e) => setNewProduct(prev => ({ ...prev, price: Number(e.target.value) }))}
                          placeholder="150000"
                        />
                      </div>
                      <div>
                        <Label htmlFor="originalPrice">Harga Asli</Label>
                        <Input
                          id="originalPrice"
                          type="number"
                          value={newProduct.originalPrice}
                          onChange={(e) => setNewProduct(prev => ({ ...prev, originalPrice: Number(e.target.value) }))}
                          placeholder="200000"
                        />
                      </div>
                    </div>

                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <Label htmlFor="category">Kategori *</Label>
                        <Select
                          value={newProduct.category}
                          onValueChange={(value) => setNewProduct(prev => ({ ...prev, category: value }))}
                        >
                          <SelectTrigger>
                            <SelectValue placeholder="Pilih kategori" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="Mobile Legends">Mobile Legends</SelectItem>
                            <SelectItem value="PUBG Mobile">PUBG Mobile</SelectItem>
                            <SelectItem value="Free Fire">Free Fire</SelectItem>
                            <SelectItem value="Genshin Impact">Genshin Impact</SelectItem>
                            <SelectItem value="Other">Lainnya</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      <div>
                        <Label htmlFor="stock">Stok</Label>
                        <Input
                          id="stock"
                          type="number"
                          value={newProduct.stock}
                          onChange={(e) => setNewProduct(prev => ({ ...prev, stock: Number(e.target.value) }))}
                          min="0"
                        />
                      </div>
                    </div>

                    <div className="flex items-center space-x-2">
                      <Switch
                        id="flashSale"
                        checked={newProduct.isFlashSale}
                        onCheckedChange={(checked) => setNewProduct(prev => ({ ...prev, isFlashSale: checked }))}
                      />
                      <Label htmlFor="flashSale">Flash Sale</Label>
                    </div>

                    <div>
                      <Label htmlFor="images">Upload Gambar</Label>
                      <div className="mt-2">
                        <Input
                          id="images"
                          type="file"
                          multiple
                          accept="image/*"
                          onChange={handleImageUpload}
                          className="mb-2"
                        />
                        {newProduct.images && newProduct.images.length > 0 && (
                          <div className="grid grid-cols-3 gap-2">
                            {newProduct.images.map((image, index) => (
                              <img
                                key={index}
                                src={image}
                                alt={`Product ${index + 1}`}
                                className="w-full h-20 object-cover rounded border"
                              />
                            ))}
                          </div>
                        )}
                      </div>
                    </div>

                    <div className="flex gap-2 pt-4">
                      <Button onClick={handleSaveProduct} className="flex-1">
                        {editingProduct ? 'Update Produk' : 'Simpan Produk'}
                      </Button>
                      <Button variant="outline" onClick={resetProductForm}>
                        Batal
                      </Button>
                    </div>
                  </div>
                </DialogContent>
              </Dialog>
            </div>

            <div className="grid gap-4">
              {products.map((product) => (
                <Card key={product.id}>
                  <CardContent className="p-4">
                    <div className="flex items-start gap-4">
                      <img
                        src={product.images[0]}
                        alt={product.title}
                        className="w-20 h-20 object-cover rounded"
                      />
                      <div className="flex-1">
                        <div className="flex items-start justify-between">
                          <div>
                            <h3 className="font-semibold">{product.title}</h3>
                            <p className="text-sm text-muted-foreground line-clamp-2">
                              {product.description}
                            </p>
                            <div className="flex items-center gap-2 mt-2">
                              <span className="font-bold text-primary">
                                {formatPrice(product.price)}
                              </span>
                              {product.originalPrice && (
                                <span className="text-sm text-muted-foreground line-through">
                                  {formatPrice(product.originalPrice)}
                                </span>
                              )}
                              <Badge variant="outline">{product.category}</Badge>
                              {product.isFlashSale && (
                                <Badge className="bg-red-500">Flash Sale</Badge>
                              )}
                            </div>
                            <p className="text-sm text-muted-foreground mt-1">
                              Stok: {product.stock}
                            </p>
                          </div>
                          <div className="flex gap-2">
                            <Button
                              variant="outline"
                              size="icon"
                              onClick={() => handleEditProduct(product)}
                            >
                              <Edit className="h-4 w-4" />
                            </Button>
                            <Button
                              variant="outline"
                              size="icon"
                              onClick={() => handleDeleteProduct(product.id)}
                            >
                              <Trash2 className="h-4 w-4" />
                            </Button>
                          </div>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          {/* Orders Tab */}
          <TabsContent value="orders">
            <Card>
              <CardHeader>
                <CardTitle>Daftar Pesanan</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {purchases.map((purchase) => (
                    <div key={purchase.id} className="flex items-center justify-between p-4 border rounded-lg">
                      <div>
                        <p className="font-medium">Order #{purchase.id}</p>
                        <p className="text-sm text-muted-foreground">
                          {formatPrice(purchase.amount)} • {purchase.paymentMethod}
                        </p>
                        <p className="text-xs text-muted-foreground">
                          {purchase.createdAt.toLocaleDateString('id-ID')}
                        </p>
                      </div>
                      <div className="text-right">
                        {getStatusBadge(purchase.status)}
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Users Tab */}
          <TabsContent value="users">
            <Card>
              <CardHeader>
                <CardTitle>Daftar Users</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {users.map((user) => (
                    <div key={user.id} className="flex items-center justify-between p-4 border rounded-lg">
                      <div>
                        <p className="font-medium">{user.name}</p>
                        <p className="text-sm text-muted-foreground">{user.email}</p>
                        <p className="text-sm text-muted-foreground">{user.whatsapp}</p>
                      </div>
                      <div className="text-right">
                        <Badge variant={user.isVerified ? 'default' : 'secondary'}>
                          {user.isVerified ? 'Terverifikasi' : 'Belum Verifikasi'}
                        </Badge>
                        <p className="text-xs text-muted-foreground mt-1">
                          {user.createdAt.toLocaleDateString('id-ID')}
                        </p>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Feed Tab */}
          <TabsContent value="feed" className="space-y-6">
            <div className="flex justify-between items-center">
              <h2 className="text-xl font-semibold">Manajemen Feed</h2>
              <Dialog open={showPostDialog} onOpenChange={setShowPostDialog}>
                <DialogTrigger asChild>
                  <Button className="gap-2">
                    <Plus className="h-4 w-4" />
                    Buat Post
                  </Button>
                </DialogTrigger>
                <DialogContent>
                  <DialogHeader>
                    <DialogTitle>Buat Post Baru</DialogTitle>
                  </DialogHeader>
                  <div className="space-y-4">
                    <div>
                      <Label htmlFor="postType">Tipe Post</Label>
                      <Select
                        value={newPost.type}
                        onValueChange={(value: 'post' | 'announcement') => 
                          setNewPost(prev => ({ ...prev, type: value }))
                        }
                      >
                        <SelectTrigger>
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="post">Post Biasa</SelectItem>
                          <SelectItem value="announcement">Pengumuman</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>

                    <div>
                      <Label htmlFor="content">Konten</Label>
                      <Textarea
                        id="content"
                        value={newPost.content}
                        onChange={(e) => setNewPost(prev => ({ ...prev, content: e.target.value }))}
                        placeholder="Tulis konten post..."
                        rows={4}
                      />
                    </div>

                    <div className="flex gap-2">
                      <Button onClick={handleCreatePost} className="flex-1">
                        Buat Post
                      </Button>
                      <Button 
                        variant="outline" 
                        onClick={() => {
                          setShowPostDialog(false);
                          setNewPost({ content: '', type: 'post' });
                        }}
                      >
                        Batal
                      </Button>
                    </div>
                  </div>
                </DialogContent>
              </Dialog>
            </div>

            <div className="space-y-4">
              {feedPosts.map((post) => (
                <Card key={post.id}>
                  <CardContent className="p-4">
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <div className="flex items-center gap-2 mb-2">
                          <Badge variant={post.type === 'announcement' ? 'default' : 'secondary'}>
                            {post.type === 'announcement' ? 'Pengumuman' : 'Post'}
                          </Badge>
                          <span className="text-sm text-muted-foreground">
                            {post.createdAt.toLocaleDateString('id-ID')}
                          </span>
                        </div>
                        <p className="whitespace-pre-wrap">{post.content}</p>
                        <div className="flex items-center gap-4 mt-3 text-sm text-muted-foreground">
                          <span className="flex items-center gap-1">
                            <Eye className="h-4 w-4" />
                            {post.likes.length} likes
                          </span>
                          <span className="flex items-center gap-1">
                            <MessageSquare className="h-4 w-4" />
                            {post.comments.length} komentar
                          </span>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}