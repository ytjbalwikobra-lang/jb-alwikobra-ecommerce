import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import { Badge } from '@/components/ui/badge';
import { Textarea } from '@/components/ui/textarea';
import { Heart, MessageCircle, ArrowLeft, Star, Edit2, Save, X } from 'lucide-react';
import { FeedPost, Review } from '@/lib/types';
import { api } from '@/lib/api';
import { useNavigate } from 'react-router-dom';
import { toast } from 'sonner';

export default function Feed() {
  const [posts, setPosts] = useState<FeedPost[]>([]);
  const [reviews, setReviews] = useState<Review[]>([]);
  const [editingReview, setEditingReview] = useState<string | null>(null);
  const [editContent, setEditContent] = useState('');
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();

  // Mock user state - in real app this would come from auth context
  const [currentUser] = useState({
    id: 'user123',
    name: 'John Doe',
    isLoggedIn: false, // Set to true to simulate logged in user
    hasPurchaseHistory: true
  });

  useEffect(() => {
    loadFeedData();
  }, []);

  const loadFeedData = async () => {
    try {
      const feedPosts = await api.getFeedPosts();
      setPosts(feedPosts);
      
      // Mock reviews data
      const mockReviews: Review[] = [
        {
          id: 'review1',
          userId: 'user123',
          productId: '1',
          purchaseId: 'purchase1',
          rating: 5,
          comment: 'Akun Mobile Legends sangat bagus! Semua skin tersedia dan rank Epic sesuai deskripsi. Penjual responsif dan transaksi lancar. Highly recommended!',
          createdAt: new Date(Date.now() - 2 * 60 * 1000), // 2 minutes ago
          canEdit: true
        },
        {
          id: 'review2',
          userId: 'user456',
          productId: '2',
          purchaseId: 'purchase2',
          rating: 4,
          comment: 'PUBG Mobile account mantap, tapi ada beberapa skin yang kurang. Overall satisfied dengan pembelian ini.',
          createdAt: new Date(Date.now() - 10 * 60 * 1000), // 10 minutes ago
          canEdit: false
        }
      ];
      setReviews(mockReviews);
    } catch (error) {
      console.error('Failed to load feed data:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleLike = (postId: string) => {
    if (!currentUser.isLoggedIn) {
      toast.error('Silakan login untuk memberikan like');
      return;
    }

    setPosts(prev => prev.map(post => {
      if (post.id === postId) {
        const isLiked = post.likes.includes(currentUser.id);
        return {
          ...post,
          likes: isLiked 
            ? post.likes.filter(id => id !== currentUser.id)
            : [...post.likes, currentUser.id]
        };
      }
      return post;
    }));
  };

  const handleComment = (postId: string) => {
    if (!currentUser.isLoggedIn) {
      toast.error('Silakan login untuk memberikan komentar');
      return;
    }
    // In real app, open comment modal or expand comment section
    toast.info('Fitur komentar akan segera tersedia');
  };

  const startEditReview = (review: Review) => {
    if (!review.canEdit) {
      toast.error('Review tidak dapat diedit lagi (lebih dari 5 menit)');
      return;
    }
    setEditingReview(review.id);
    setEditContent(review.comment);
  };

  const saveEditReview = async (reviewId: string) => {
    try {
      setReviews(prev => prev.map(review => 
        review.id === reviewId 
          ? { ...review, comment: editContent }
          : review
      ));
      setEditingReview(null);
      setEditContent('');
      toast.success('Review berhasil diupdate');
    } catch (error) {
      toast.error('Gagal mengupdate review');
    }
  };

  const cancelEditReview = () => {
    setEditingReview(null);
    setEditContent('');
  };

  const renderStars = (rating: number) => {
    return [...Array(5)].map((_, i) => (
      <Star
        key={i}
        className={`h-4 w-4 ${i < rating ? 'fill-yellow-400 text-yellow-400' : 'text-gray-300'}`}
      />
    ));
  };

  const getTimeAgo = (date: Date) => {
    const now = new Date();
    const diffInMinutes = Math.floor((now.getTime() - date.getTime()) / (1000 * 60));
    
    if (diffInMinutes < 1) return 'Baru saja';
    if (diffInMinutes < 60) return `${diffInMinutes} menit lalu`;
    if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)} jam lalu`;
    return `${Math.floor(diffInMinutes / 1440)} hari lalu`;
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p>Memuat feed komunitas...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b sticky top-0 z-10">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center gap-4">
            <Button variant="ghost" size="icon" onClick={() => navigate('/')}>
              <ArrowLeft className="h-4 w-4" />
            </Button>
            <div>
              <h1 className="text-xl font-bold">Feed Komunitas</h1>
              <p className="text-sm text-muted-foreground">
                {currentUser.isLoggedIn ? 'Bergabunglah dalam diskusi' : 'Login untuk berinteraksi'}
              </p>
            </div>
          </div>
        </div>
      </header>

      <div className="container mx-auto px-4 py-6 max-w-2xl">
        {/* Login Notice for Guests */}
        {!currentUser.isLoggedIn && (
          <Card className="mb-6 border-blue-200 bg-blue-50">
            <CardContent className="p-4">
              <p className="text-sm text-blue-800">
                <strong>Info:</strong> Anda sedang melihat sebagai guest. 
                Login untuk memberikan like, komentar, dan review.
              </p>
            </CardContent>
          </Card>
        )}

        {/* Posts Section */}
        <div className="space-y-6">
          <h2 className="text-lg font-semibold">Postingan & Pengumuman</h2>
          
          {posts.map((post) => (
            <Card key={post.id} className="hover:shadow-md transition-shadow">
              <CardHeader className="pb-3">
                <div className="flex items-center gap-3">
                  <Avatar>
                    <AvatarFallback className="bg-gradient-to-r from-blue-600 to-purple-600 text-white">
                      {post.authorName.charAt(0)}
                    </AvatarFallback>
                  </Avatar>
                  <div className="flex-1">
                    <div className="flex items-center gap-2">
                      <h3 className="font-medium">{post.authorName}</h3>
                      {post.type === 'announcement' && (
                        <Badge variant="secondary">Pengumuman</Badge>
                      )}
                    </div>
                    <p className="text-sm text-muted-foreground">
                      {getTimeAgo(post.createdAt)}
                    </p>
                  </div>
                </div>
              </CardHeader>
              
              <CardContent className="pt-0">
                <p className="mb-4 whitespace-pre-wrap">{post.content}</p>
                
                {post.images && post.images.length > 0 && (
                  <div className="grid grid-cols-2 gap-2 mb-4">
                    {post.images.map((image, index) => (
                      <img
                        key={index}
                        src={image}
                        alt={`Post image ${index + 1}`}
                        className="rounded-lg object-cover aspect-video"
                      />
                    ))}
                  </div>
                )}
                
                <div className="flex items-center gap-4 pt-3 border-t">
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => handleLike(post.id)}
                    className={`gap-2 ${post.likes.includes(currentUser.id) ? 'text-red-500' : ''}`}
                  >
                    <Heart className={`h-4 w-4 ${post.likes.includes(currentUser.id) ? 'fill-current' : ''}`} />
                    {post.likes.length}
                  </Button>
                  
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => handleComment(post.id)}
                    className="gap-2"
                  >
                    <MessageCircle className="h-4 w-4" />
                    {post.comments.length}
                  </Button>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>

        {/* Reviews Section */}
        {currentUser.hasPurchaseHistory && (
          <div className="space-y-6 mt-8">
            <h2 className="text-lg font-semibold">Review Pembelian</h2>
            
            {reviews.map((review) => (
              <Card key={review.id} className="hover:shadow-md transition-shadow">
                <CardContent className="p-4">
                  <div className="flex items-start justify-between mb-3">
                    <div className="flex items-center gap-2">
                      <div className="flex">{renderStars(review.rating)}</div>
                      <span className="text-sm text-muted-foreground">
                        {getTimeAgo(review.createdAt)}
                      </span>
                    </div>
                    
                    {review.userId === currentUser.id && review.canEdit && (
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => startEditReview(review)}
                        className="gap-1"
                      >
                        <Edit2 className="h-3 w-3" />
                        Edit
                      </Button>
                    )}
                  </div>
                  
                  {editingReview === review.id ? (
                    <div className="space-y-3">
                      <Textarea
                        value={editContent}
                        onChange={(e) => setEditContent(e.target.value)}
                        placeholder="Tulis review Anda..."
                        className="min-h-[100px]"
                      />
                      <div className="flex gap-2">
                        <Button
                          size="sm"
                          onClick={() => saveEditReview(review.id)}
                          className="gap-1"
                        >
                          <Save className="h-3 w-3" />
                          Simpan
                        </Button>
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={cancelEditReview}
                          className="gap-1"
                        >
                          <X className="h-3 w-3" />
                          Batal
                        </Button>
                      </div>
                    </div>
                  ) : (
                    <p className="text-sm leading-relaxed">{review.comment}</p>
                  )}
                  
                  {review.canEdit && editingReview !== review.id && (
                    <p className="text-xs text-muted-foreground mt-2">
                      Review dapat diedit dalam 5 menit setelah posting
                    </p>
                  )}
                </CardContent>
              </Card>
            ))}
          </div>
        )}

        {/* Empty State */}
        {posts.length === 0 && reviews.length === 0 && (
          <div className="text-center py-12">
            <MessageCircle className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
            <h3 className="text-lg font-medium mb-2">Belum ada postingan</h3>
            <p className="text-muted-foreground">
              Jadilah yang pertama untuk berbagi di komunitas ini!
            </p>
          </div>
        )}
      </div>
    </div>
  );
}